// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {TVerifier} from "../../src/Tokamak-zkEVM/Tverifier.sol";
import "forge-std/console.sol";

contract testLineaVerifier is Test {
    TVerifier tverifier;

    uint256[] public publicInputs;
    uint256[] public serializedProof;

    function setUp() public virtual {
        tverifier = new TVerifier();

        // array of length 12 => 0.3kb
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        publicInputs.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);

        // array of length 12 => 0.3kb
        serializedProof.push(10032255692304426541958487424837706541667730769782503366592797609781788557424);
        serializedProof.push(11856023086316274558845067687080284266010851703055534566998849536424959073766);
        serializedProof.push(1946976494418613232642071265529572704802622739887191787991738703483400525159);
        serializedProof.push(1328106069458824013351862477593422369726189688844441245167676630500797673929);
        serializedProof.push(15488976127650523079605218040232167291115155239002840072043251018873550258833);
        serializedProof.push(4352460820258659596860226525221943504756149602617718032378962471842121872064);
        serializedProof.push(10499239305859992443759785453270906003243074359959242371675950941500942473773);
        serializedProof.push(21347231097799123231227724221565041889687686131480556177475242020711996173235);
        serializedProof.push(21448274562455512652922184359722637546669181231038098300951155169465175447933);
        serializedProof.push(5224615512030263722410009061780530125927659699046094954022444377569738464640);
        serializedProof.push(457781538876079938778845275495204146302569607395268192839148474821758081582);
        serializedProof.push(18861735728246155975127314860333796285284072325207684293054713266899263027595);
    
    }

    function testTVerifier() public view {
        // Call the verify function
        bool result = tverifier.verify(publicInputs, serializedProof);
        assertFalse(result);
    }
}
